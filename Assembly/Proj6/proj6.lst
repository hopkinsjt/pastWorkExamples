Microsoft (R) Macro Assembler Version 6.11		    12/08/17 00:57:08
proj6.asm						     Page 1 - 1


				;******************************************************************************************
				;Program Name: proj6.asm
				;Programmer:   Justin Hopkins
				;Class:        CSCI 2160-001
				;Date:         DEC,08 2017 at 09:00 AM
				;Purpose:
				;	a driver to test the ConvertMethods.asm
				;******************************************************************************************

					.486
					.model flat
					.stack 100h
					
					ExitProcess PROTO Near32 stdcall, dwExitCode:dword
					String_length	proto Near32 stdcall, lpString:dword
					memoryallocBailey proto near32 stdCall, numBytes:dword
					intasc32Comma	proto Near32 stdcall, lpStringToHold:dword, dval:dword
					intasc32	PROTO Near32 stdcall, lpStringToHold:dword, dval:dword
					hexToChar PROTO Near32 stdcall,lpDestStr:dword,lpSourceStr:dword,dLen:dword
					putstring 	PROTO Near32 stdcall, lpStringToPrint:dword
					getstring	PROTO Near32 stdcall, lpStringToGet:dword, dlength:dword
					
					hexToCharacter proto near32 stdCall,lpDestination:dword,lpSource:dWord,numBytes:dword
					charTo4HexDigits proto near32 stdCall, lpSourceString:dword
					encrypt32Bit proto near32 stdCall,lpSourceString:dword,dMask:dword,numBytes:dword
 00000000				.data
 00000000 0A 0D 0A 0D 09	strHeading	byte	10,13,10,13,9," Name: Justin Hopkins"
	   20 4E 61 6D 65
	   3A 20 4A 75 73
	   74 69 6E 20 48
	   6F 70 6B 69 6E
	   73
 0000001A  0A 0D 09 43 6C				byte	10,13,9,"Class: CSCI 2160-001"
	   61 73 73 3A 20
	   43 53 43 49 20
	   32 31 36 30 2D
	   30 30 31
 00000031  0A 0D 09 20 44				byte	10,13,9," Date: DEC,08 2017 at 09:00 AM"
	   61 74 65 3A 20
	   44 45 43 2C 30
	   38 20 32 30 31
	   37 20 61 74 20
	   30 39 3A 30 30
	   20 41 4D
 00000052  0A 0D 09 20 20				byte	10,13,9,"  Lab: Proj6",10,13,0
	   4C 61 62 3A 20
	   50 72 6F 6A 36
	   0A 0D 00
 00000064 00000000		iMask		dWord	?			;will hold the dword mask
 00000068 1234ABCD		ihexTest    dword	1234ABCDh
 0000006C 0A 0D 09 45 6E	strEnter	byte	10,13,9,"Enter 8-DigitMask: ",0
	   74 65 72 20 38
	   2D 44 69 67 69
	   74 4D 61 73 6B
	   3A 20 00
 00000083 0A 0D 09 4D 61	strMask		byte	10,13,9,"Mask: ",0
	   73 6B 3A 20 00
 0000008D 0A 0D 09 41 53	strPromptasc byte	10,13,9,"ASCII Chars to display hex version: ",0
	   43 49 49 20 43
	   68 61 72 73 20
	   74 6F 20 64 69
	   73 70 6C 61 79
	   20 68 65 78 20
	   76 65 72 73 69
	   6F 6E 3A 20 00
 000000B5 0A 0D 09 53 74	strEnc	    byte	10,13,9, "String To Encrypt",0
	   72 69 6E 67 20
	   54 6F 20 45 6E
	   63 72 79 70 74
	   00
 000000CA 0A 0D 09 48 65	strHexV		byte	10,13,9,"Hex Version: ",0
	   78 20 56 65 72
	   73 69 6F 6E 3A
	   20 00
 000000DB 0A 0D 09 45 6E	strEncV		byte	10,13,9,"Encrypted: ",0
	   63 72 79 70 74
	   65 64 3A 20 00
 000000EA 0A 0D 09 55 6E	strUnEnc	byte	10,13,9,"UnEncrypted: ",0
	   45 6E 63 72 79
	   70 74 65 64 3A
	   20 00
 000000FB 0A 0D 09 6F 6E	strConvBack byte	10,13,9,"onverted back To ascii: ",0
	   76 65 72 74 65
	   64 20 62 61 63
	   6B 20 54 6F 20
	   61 73 63 69 69
	   3A 20 00
 00000117 0A 0D 09 59 6F	strInvalid  byte 	10,13,9,"You entered an invalid mask. Please try again.",0
	   75 20 65 6E 74
	   65 72 65 64 20
	   61 6E 20 69 6E
	   76 61 6C 69 64
	   20 6D 61 73 6B
	   2E 20 50 6C 65
	   61 73 65 20 74
	   72 79 20 61 67
	   61 69 6E 2E 00
 00000149 41 42 43 20 31	strasciiEx  byte    "ABC 123 &$!",0
	   32 33 20 26 24
	   21 00
 00000155 20 2D 2D 3E 20	strArrow	byte	" --> ",0
	   00
 0000015B 00000068 R		lpHexTest	dword   ihexTest
 0000015F 31 32 33 34 41	bTest		byte    "1234ABCD",0				;test hexToChar
	   42 43 44 00
 00000168 47 65 4F 72 47	strGW		byte	"GeOrGe WaShInGtOn",0
	   65 20 57 61 53
	   68 49 6E 47 74
	   4F 6E 00
 0000017A  00000050 [		strResult   byte	80 dup(?)				;hold the returned string
	    00
	   ]
 000001CA 00000000		iResult2  dWord	?						;will hold a returned address
 000001CE 0A 0D 00		crlf		byte	10,13,0					;newLine

				;************************************************************************************
				; name:  puts strToPrint
				; date: 4/7/2017
				; purpose:  display a string to the user 
				;************************************************************************************
				puts	macro	strToPrint
					push ebx
					lea ebx,[strToPrint]
					INVOKE putstring, ebx
					pop ebx
					endm
				;-------------------------------		
 00000000				.code	
 00000000			_start: 
 00000000  B8 00000000			mov eax,0								;dummy executable statement for debugging.
				COMMENT%
				************************************************************************************
				 name:  main
				 date: 12/08/2017
				 purpose: driver for testing encryption and hexToCharacter methods 

				************************************************************************************%	
 00000005 00000005		main proc
					puts strHeading							;display programmer info
 00000005  53		     1		push ebx
 00000006  8D 1D 00000000 R  1		lea ebx,[strHeading]
 00000012  5B		     1		pop ebx
					puts crlf								;new line
 00000013  53		     1		push ebx
 00000014  8D 1D 000001CE R  1		lea ebx,[crlf]
 00000020  5B		     1		pop ebx
 00000021			maskValid:									;test to see if user entered a valid mask
					puts strEnter							;prompt user for input
 00000021  53		     1		push ebx
 00000022  8D 1D 0000006C R  1		lea ebx,[strEnter]
 0000002E  5B		     1		pop ebx
					INVOKE getString, addr strResult,8		;get mask from user
					INVOKE charTo4HexDigits,addr strResult	;test and build the mask
					.if eax == 0FFFFFFFFh					;if eax is negative 1 the mask is invalid
						puts strInvalid						;prompt user to re enter the string
 0000004A  53		     1		push ebx
 0000004B  8D 1D 00000117 R  1		lea ebx,[strInvalid]
 00000057  5B		     1		pop ebx
 00000058  EB C7				jmp maskValid						;get the mask again
					.endif									;end if eax == -1
 0000005A  A3 00000064 R		mov iMask,eax							;store the mask
					puts strMask							;display "Mask: "
 0000005F  53		     1		push ebx
 00000060  8D 1D 00000083 R  1		lea ebx,[strMask]
 0000006C  5B		     1		pop ebx
					puts strResult							;display the mask the user entered
 0000006D  53		     1		push ebx
 0000006E  8D 1D 0000017A R  1		lea ebx,[strResult]
 0000007A  5B		     1		pop ebx
					puts strPromptasc						;display prompt to user
 0000007B  53		     1		push ebx
 0000007C  8D 1D 0000008D R  1		lea ebx,[strPromptasc]
 00000088  5B		     1		pop ebx
					puts crlf								;new line
 00000089  53		     1		push ebx
 0000008A  8D 1D 000001CE R  1		lea ebx,[crlf]
 00000096  5B		     1		pop ebx
					puts strasciiEx							;display ABC 123 &$!
 00000097  53		     1		push ebx
 00000098  8D 1D 00000149 R  1		lea ebx,[strasciiEx]
 000000A4  5B		     1		pop ebx
					puts strArrow							;display arrow
 000000A5  53		     1		push ebx
 000000A6  8D 1D 00000155 R  1		lea ebx,[strArrow]
 000000B2  5B		     1		pop ebx
					Invoke hexToCharacter,addr strResult, addr strAsciiex, 12 ;convert to display asscii 
					puts strResult											  ;display the hex values
 000000C4  53		     1		push ebx
 000000C5  8D 1D 0000017A R  1		lea ebx,[strResult]
 000000D1  5B		     1		pop ebx
					puts strEnc												  ;display prompt to user
 000000D2  53		     1		push ebx
 000000D3  8D 1D 000000B5 R  1		lea ebx,[strEnc]
 000000DF  5B		     1		pop ebx
					puts strArrow											  ;display arrow
 000000E0  53		     1		push ebx
 000000E1  8D 1D 00000155 R  1		lea ebx,[strArrow]
 000000ED  5B		     1		pop ebx
					puts strGW												  ;display george washington
 000000EE  53		     1		push ebx
 000000EF  8D 1D 00000168 R  1		lea ebx,[strGW]
 000000FB  5B		     1		pop ebx
					puts strHexV											  ;display hex Version
 000000FC  53		     1		push ebx
 000000FD  8D 1D 000000CA R  1		lea ebx,[strHexV]
 00000109  5B		     1		pop ebx
					Invoke hexToCharacter,addr strResult, addr strGW, 18      ;hex values for the string
					puts strResult											  ;display the hex values
 0000011B  53		     1		push ebx
 0000011C  8D 1D 0000017A R  1		lea ebx,[strResult]
 00000128  5B		     1		pop ebx
					puts strEncV											  ;display encrypted
 00000129  53		     1		push ebx
 0000012A  8D 1D 000000DB R  1		lea ebx,[strEncV]
 00000136  5B		     1		pop ebx
					INVOKE encrypt32Bit, addr strGW, iMask, 18 				  ;encryp the string
 00000149  A3 000001CA R		mov iResult2,eax										  ;store the encrypted string
					INVOKE hexToCharacter,addr strResult,iResult2,18		  ;displayable encrypted sring
					puts strResult											  ;display the encrypted string
 00000160  53		     1		push ebx
 00000161  8D 1D 0000017A R  1		lea ebx,[strResult]
 0000016D  5B		     1		pop ebx
					puts crlf												  ;new line
 0000016E  53		     1		push ebx
 0000016F  8D 1D 000001CE R  1		lea ebx,[crlf]
 0000017B  5B		     1		pop ebx
					puts strUnEnc										   	  ;"UnEncrypted: "
 0000017C  53		     1		push ebx
 0000017D  8D 1D 000000EA R  1		lea ebx,[strUnEnc]
 00000189  5B		     1		pop ebx
					INVOKE encrypt32Bit, iresult2, iMask, 18				  ;decrypt the string
 0000019D  A3 000001CA R		mov iResult2,eax										  ;strore the returned string
					INVOKE hexToCharacter,addr strResult,iResult2,18		  ;hex values of the string
					puts strResult											  ;display unencrypted string
 000001B4  53		     1		push ebx
 000001B5  8D 1D 0000017A R  1		lea ebx,[strResult]
 000001C1  5B		     1		pop ebx
					puts strConvBack						                  ;"Converted back to ascii: "
 000001C2  53		     1		push ebx
 000001C3  8D 1D 000000FB R  1		lea ebx,[strConvBack]
 000001CF  5B		     1		pop ebx
					INVOKE putstring, iResult2								  ;display the string
					

					
					INVOKE ExitProcess,0					;terminate "normally" the program
					PUBLIC _start							;needed for proper assembly
 000001E2			main endp									;end of main procedure
					END										;The very LAST line in your program. 
	
Microsoft (R) Macro Assembler Version 6.11		    12/08/17 00:57:08
proj6.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

puts . . . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00000100 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000001D1 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001E2 DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

$$$$$$00001  . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000005 Private
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_length  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
charTo4HexDigits . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
encrypt32Bit . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
getstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
hexToCharacter . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
hexToChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
intasc32Comma  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
intasc32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000005 _TEXT	Length= 000001DD Public
  maskValid  . . . . . . . . . .	L Near	 00000021 _TEXT	
memoryallocBailey  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
putstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_start . . . . . . . . . . . . .	L Near	 00000000 _TEXT	Public
bTest  . . . . . . . . . . . . .	Byte	 0000015F _DATA	
crlf . . . . . . . . . . . . . .	Byte	 000001CE _DATA	
iMask  . . . . . . . . . . . . .	DWord	 00000064 _DATA	
iResult2 . . . . . . . . . . . .	DWord	 000001CA _DATA	
ihexTest . . . . . . . . . . . .	DWord	 00000068 _DATA	
lpHexTest  . . . . . . . . . . .	DWord	 0000015B _DATA	
strArrow . . . . . . . . . . . .	Byte	 00000155 _DATA	
strConvBack  . . . . . . . . . .	Byte	 000000FB _DATA	
strEncV  . . . . . . . . . . . .	Byte	 000000DB _DATA	
strEnc . . . . . . . . . . . . .	Byte	 000000B5 _DATA	
strEnter . . . . . . . . . . . .	Byte	 0000006C _DATA	
strGW  . . . . . . . . . . . . .	Byte	 00000168 _DATA	
strHeading . . . . . . . . . . .	Byte	 00000000 _DATA	
strHexV  . . . . . . . . . . . .	Byte	 000000CA _DATA	
strInvalid . . . . . . . . . . .	Byte	 00000117 _DATA	
strMask  . . . . . . . . . . . .	Byte	 00000083 _DATA	
strPromptasc . . . . . . . . . .	Byte	 0000008D _DATA	
strResult  . . . . . . . . . . .	Byte	 0000017A _DATA	
strUnEnc . . . . . . . . . . . .	Byte	 000000EA _DATA	
strasciiEx . . . . . . . . . . .	Byte	 00000149 _DATA	

	   0 Warnings
	   0 Errors
